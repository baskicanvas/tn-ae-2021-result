{"version":3,"sources":["components/Dropdown.js","components/SubtitleH3.js","components/ElectionSummary.js","components/ResultSummary.js","components/TextContent.js","components/DateName.js","BarChart/AxisBottom.js","BarChart/AxisLeft.js","BarChart/MarksBar.js","BarChart/MarksCircle.js","BarChart/BarTooltip.js","BarChart/BarLegend.js","DataProcess/RearrangeData.js","BarChart/BarChart.js","DataProcess/GetGeoJsonData.js","GeoChart/MarkMap.js","GeoChart/GeoMapWinner.js","GeoChart/GeoMapWinnerLegend.js","GeoChart/GeoMapLegend.js","GeoChart/GeoMapVotes.js","GeoChart/GeoMapParties.js","components/RadioButtonGroup.js","GeoChart/GeoChart.js","GeoChart/GeoChartWrapper.js","components/DisclaimerSection.js","App.js","DataProcess/GetCsvData.js","index.js"],"names":["Dropdown","id","defaultValue","className","options","dropdownVale","disabled","onOptionChange","onChange","event","target","value","map","index","label","selected","SubtitleH3","text","ElectionSummary","electionSummary","key","ResultSummary","resultSummary","allColors","winnersData","party","seats","width","height","cx","cy","r","fill","colSpan","length","TextContent","textContent","DataName","AxisBottom","xScale","innerHeight","tickFormat","ticks","xTickValues","transform","x1","y1","x2","y2","dy","style","textAnchor","y","React","memo","AxisLeft","yScale","innerWidth","domain","yTickValues","bandwidth","x","MarksBar","cName","getConsNumber","xValue","yValue","data","onMarksBarClick","d","onClick","areEqual","prevProps","nextProps","MarksCircle","rScale","rDomain","selectColor","opacity","BarTooltip","margin","xValueVotes","xValuePolledVotes","xValueCandidateVotes","candidateVotes","candidate","consData","dataFormat","onCloseBtnClick","undefined","console","log","tooltipXPos","tooltipYPos","top","BarLegend","df","d3","getDistrict","getDistrictNumber","getPolledVotesColor","getConsInfoByConsNum","consNumber","filter","getDataByDistrictNum","dustrictNum","getDataByPartyName","partyName","getDescenConsInfo","sortDescenting","slice","sort","a","b","sortAscending","getConsNumbers","Map","rowData","keys","getUniqueDataByKey","values","getUniqueSetbyColumnKey","Set","getWinnersSummary","uniqueData","sortUniqueData","barChartOptions","voteOptions","right","bottom","left","BarChart","district","chartOrder","useState","setconsData","useMemo","uniqueAcData","allDataSort","consNumbers","flat","getFilterdDataByConsNum","range","padding","useEffect","GetGeoJsonData","jsonUrl","mapType","setData","then","topojsonData","tn_ac_2021_hex_map","objects","tn_ac","topojson","interiors","tn_ac_2021","MarkMap","forwardRef","ref","mapData","path","fillColor","features","feature","acNumber","distNumber","constituency","GeoMapWinner","refG","useRef","partyWinnersData","mapPaths","current","selectAll","each","el","this","winnersRowData","Number","attr","select","GeoMapWinnerLegend","posY","posX","GeoMapLegend","steps","additionalSteps","items","i","push","GeoMapVotes","voteMap","refGeoMapLegengG","df2","maxVotes","mapLegendText","mapLegendOpacity","selectlegengG","mapLegendsText","mapLegendsCircle","candidates","winningMargin","lgel","GeoMapParties","selectParty","partyData","allConsTopIndeDatas","winnerData","consIndeDatas","sortConsIndeDatas","getConsDataForIndeCandidates","color","RadioButton","name","checked","type","defaultChecked","htmlFor","RadioButtonGroup","onChangeValue","projection","center","scale","translate","GeoChart","hexMapData","stdMapData","setMapType","setVoteMap","setSelectParty","allParties","filterData","partiesAboveSort","makePartiesDropdownData","find","defaultVale","GeoChartWrapper","DisclaimerSection","href","rel","start","App","csvUrl","GetCsvData","setDistrict","setChartOrder","setPartyName","getWinnersData","districtsDropdownData","dropdownData","unshift","makeDistrictsDropdownData","partiesDropdownData","makeWinPartiesDropdownData","totalParties","districts","maleVotes","femaleVotes","otherVotes","totalVotes","totalPolledVotes","getElectionSummary","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fe1685bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Dropdown = ({\r\n    id,\r\n    className,\r\n    defaultValue,\r\n    options,\r\n    dropdownVale,\r\n    disabled,\r\n    onOptionChange\r\n}) => {\r\n    // console.log('Dropdown');\r\n    return (\r\n        <div>\r\n            <select \r\n                id={id} \r\n                defaultValue={defaultValue}\r\n                className='select-option' \r\n                disabled = {disabled}\r\n                onChange={event => onOptionChange(event.target.value)}\r\n            >\r\n                {options.map(({value, label}, index) => (\r\n                    <option \r\n                        key={index} \r\n                        value={value}\r\n                        selected={value === dropdownVale}\r\n                    >{label}</option>\r\n                ))}                   \r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dropdown;","import React from \"react\";\r\n\r\nconst SubtitleH3 = ({\r\n    className,\r\n    text\r\n}) => {\r\n    return (\r\n        <div className={className}>\r\n            <h3>{text}</h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SubtitleH3;","import React from \"react\";\r\n\r\nconst ElectionSummary = ({\r\n    electionSummary\r\n}) => {\r\n    return(\r\n        <div className='election-summary'>\r\n            <table className='election-summary-table'>\r\n                <tbody>\r\n                    {electionSummary.map(({key, value}, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td className='table-head-line'>{key}</td>\r\n                                <td className='table-head-line'>{value}</td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ElectionSummary;\r\n\r\n","import React from \"react\";\r\n\r\nconst ResultSummary = ({\r\n    resultSummary,\r\n    allColors,\r\n    winnersData\r\n}) => {\r\n    return(\r\n            <div className='result-summary'>\r\n            <table className='result-summary-table'>\r\n                <thead>\r\n                    <tr>\r\n                        <td className='table-head-line'>No</td>\r\n                        <td className='table-head-line'>Party</td>\r\n                        <td className='table-head-line'>Party color</td>\r\n                        <td className='table-head-line'>No of seats</td>\r\n                        \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {resultSummary.map(({party, seats}, index) =>{\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td className='table-head-line'>{index+1}</td>\r\n                                <td className='table-head-line'>{party}</td>\r\n                                <td className='table-head-line'>\r\n                                    <svg width={20} height={20}>\r\n                                        <circle\r\n                                            cx={10}\r\n                                            cy={10}\r\n                                            r={9}\r\n                                            fill={allColors[party]}\r\n                                        ></circle>\r\n                                    </svg>\r\n                                </td>\r\n                                <td className='table-head-line'>{seats}</td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                    <tr>\r\n                        <td colSpan={3}>Total</td>\r\n                        <td>{winnersData.length}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultSummary;","import React from \"react\";\r\n\r\nconst TextContent = ({\r\n    className,\r\n    textContent\r\n}) => {\r\n    return(\r\n        <p className={className}>\r\n            {textContent}\r\n        </p>\r\n    );\r\n};\r\n\r\nexport default TextContent;","\r\nimport React from \"react\";\r\n\r\nconst DataName = ({className}) => {\r\n    return(\r\n        <p className={className}>\r\n            09/09/2021 - Baskaran Karuppaiyan\r\n        </p>\r\n    );\r\n};\r\n\r\nexport default DataName;","import React from 'react';\r\n\r\nconst AxisBottom = ({xScale, innerHeight, tickFormat}) => (\r\n    xScale.ticks(5).map((xTickValues, index) => (\r\n        <g className=\"tick\" key={index} transform={`translate(${xScale(xTickValues)}, 0)`}>\r\n            <line\r\n                key={index}\r\n                x1={0}\r\n                y1={0}\r\n                x2={0}\r\n                y2={innerHeight}\r\n            />\r\n            <text dy=\".71em\" style={{textAnchor:'middle'}} y={innerHeight+3}>\r\n                {tickFormat(xTickValues)}\r\n            </text>\r\n        </g>\r\n    ))\r\n);\r\n\r\nexport default React.memo(AxisBottom);","import React from 'react';\r\n\r\nconst AxisLeft = ({yScale, innerWidth}) => (\r\n    yScale.domain().map((yTickValues, index) => (\r\n        <g className=\"tick\" key={index} transform={`translate(0, ${yScale(yTickValues) + yScale.bandwidth() / 2})`}>\r\n            <text dy=\".32em\"x={innerWidth / 5 - 5} style={{textAnchor:'end'}}>\r\n                {yTickValues}\r\n            </text>\r\n        </g>\r\n    ))\r\n);\r\n\r\nexport default React.memo(AxisLeft);","import React from 'react';\r\n\r\nconst MarksBar = ({\r\n    cName, \r\n    xScale, \r\n    yScale,\r\n    getConsNumber,\r\n    innerWidth, \r\n    xValue, \r\n    yValue, \r\n    data,\r\n    onMarksBarClick\r\n}) => {\r\n    // console.log('MarksBar');\r\n    return(\r\n        data.map((d, index) => {\r\n            return (\r\n                <g key={yValue(d)} transform={`translate(${xScale(innerWidth / 2)}, 0)`}>\r\n                    <rect\r\n                        className={cName}\r\n                        x={0}\r\n                        y={yScale(yValue(d))}\r\n                        width={xScale(xValue(d)) - xScale(innerWidth / 2)}\r\n                        height={yScale.bandwidth()}\r\n                        onClick={() => onMarksBarClick(getConsNumber(d))}\r\n                    />\r\n                </g>\r\n            );\r\n        })\r\n    );\r\n};\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n    return prevProps.cName === nextProps.cName\r\n        && prevProps.xScale === nextProps.xScale\r\n        && prevProps.yScale === nextProps.yScale\r\n        && prevProps.innerWidth === nextProps.innerWidth\r\n        && prevProps.xValue === nextProps.xValue\r\n        && prevProps.yValue === nextProps.yValue\r\n        && prevProps.data === nextProps.data\r\n}\r\n\r\nexport default React.memo(MarksBar, areEqual);\r\n// export default React.memo(MarksBar);","import React from 'react';\r\n\r\nconst MarksCircle = ({\r\n    xScale, \r\n    yScale, \r\n    rScale, \r\n    rDomain, \r\n    xValue, \r\n    yValue, \r\n    selectColor,\r\n    allColors, \r\n    opacity, \r\n    data\r\n}) => (\r\n    data.map((d, index) => {\r\n        rScale.domain([0, rDomain(d)]);\r\n        return (\r\n            <circle\r\n                key={index}\r\n                cx={xScale(xValue(d))}\r\n                cy={yScale(yValue(d)) + yScale.bandwidth() / 2}\r\n                r={rScale(xValue(d)) / 2}\r\n                fill={allColors[selectColor(d)]}\r\n                opacity={opacity}\r\n            >\r\n            </circle>\r\n        );\r\n    })\r\n);\r\n\r\n// export default React.memo(MarksCircle, areEqual);\r\nexport default React.memo(MarksCircle);","import React from 'react';\r\n\r\nconst BarTooltip = ({\r\n    margin,\r\n    xScale,\r\n    yScale,\r\n    yValue,\r\n    xValueVotes,\r\n    xValuePolledVotes,\r\n    party,\r\n    xValueCandidateVotes,\r\n    candidateVotes,\r\n    selectColor,\r\n    allColors,\r\n    candidate,\r\n    consData,\r\n    dataFormat,\r\n    onCloseBtnClick\r\n}) => {\r\n    if(consData === undefined) {\r\n        // console.log(consData, tooltip);\r\n        return null;\r\n    }\r\n    console.log('Tooltip');\r\n    const tooltipXPos = xScale(xValueVotes(consData[0])) + 12;\r\n    const tooltipYPos = yScale(yValue(consData[0])) + margin.top - 15;\r\n    const transform = {\r\n        transform: `translate(${tooltipXPos}px, calc(${tooltipYPos}px))`\r\n    }\r\n    return (\r\n        <div \r\n            className='bar-chart-tooltip' \r\n            style={transform}\r\n        >\r\n            <table>\r\n                <thead className='table-head'>\r\n                    <tr>\r\n                        <td className='table-head-name' colSpan={5}>{yValue(consData[0])}</td>\r\n                        <td className='table-head-name'>\r\n                            <button onClick={() => {\r\n                                return onCloseBtnClick(undefined)\r\n                                }}\r\n                            >X\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colSpan={4}>Total Votes</td>\r\n                        <td colSpan={2}>{dataFormat(xValueVotes(consData[0]))}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className='table-head-line' colSpan={4}>Total Polled Votes</td>\r\n                        <td className='table-head-line' colSpan={2}>{dataFormat(xValuePolledVotes(consData[0]))}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className='table-head-line'>No</td>\r\n                        <td className='table-head-line'>Name</td>\r\n                        <td className='table-head-line'>Party</td>\r\n                        <td className='table-head-line'>Votes</td>\r\n                        <td className='table-head-line'>%</td>\r\n                        <td className='table-head-line'></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {consData.map((d, index) => {\r\n                        return (\r\n                            <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{candidate(d)}</td>\r\n                                <td>{party(d)}</td>\r\n                                <td>{dataFormat(xValueCandidateVotes(d))}</td>\r\n                                <td>{candidateVotes(d)}</td>\r\n                                <td>\r\n                                    <svg width={20} height={20}>\r\n                                        <circle\r\n                                            cx={10}\r\n                                            cy={10}\r\n                                            r={9}\r\n                                            fill={allColors[selectColor(d)]}\r\n                                            opacity={candidateVotes(d)}\r\n                                        ></circle>\r\n                                    </svg>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default React.memo(BarTooltip);\r\n// export default Tooltip;","\r\nconst BarLegend = ({\r\n    className,\r\n    x,\r\n    y\r\n}) => {\r\n    return (\r\n        <>\r\n            <g transform={`translate(${x},${y})`}>\r\n                <rect\r\n                    className={className}\r\n                    x={0}\r\n                    y={0}\r\n                    width={40}\r\n                    height={20}\r\n                ></rect>\r\n                <text\r\n                    className='chart-label'\r\n                    x={100}\r\n                    y={15}\r\n                    textAnchor='middle'\r\n                    >\r\n                    Total votes\r\n                </text>\r\n                <circle\r\n                    className={className}\r\n                    cx={200}\r\n                    cy={10}\r\n                    r={10}\r\n                ></circle>\r\n                <text\r\n                    className='chart-label'\r\n                    x={275}\r\n                    y={15}\r\n                    textAnchor='middle'\r\n                    >\r\n                    Polled votes\r\n                </text>\r\n                <text\r\n                    className='chart-label'\r\n                    x={650}\r\n                    y={15}\r\n                    textAnchor='middle'\r\n                    >\r\n                    Other colored circles represents different party votes\r\n                </text>\r\n            </g>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default BarLegend;","import * as d3 from 'd3';\r\n\r\n// imported functions\r\n\r\n// xValueVotes,\r\n// xValuePolledVotes,\r\n// xValueCandidateVotes,\r\n// yValue,  \r\n// getConsNumber,\r\n// getDistrict,\r\n// getUniqueSetbyColumnKey,\r\n// makeDropdownData,\r\n// party,\r\n// candidateVotes,\r\n// selectColor,'\r\n// candidate,\r\n// getUniqueData,\r\n// getDescenConsInfo,\r\n// sortDescenting,\r\n// getWinnersData,\r\n// allColors,\r\n// barChartOptions\r\n\r\nlet df = d3.format(\",d\");\r\n// all accessor function\r\n//  Get the value in a given row\r\n// Example xValueVotes(d) will give the 'toral_value' in that row\r\nexport const xValueVotes = d => d['total_votes'];\r\nexport const xValuePolledVotes = d => d['total_polled_votes'];\r\nexport const getPollPercentage = d => d['poll_percentage']\r\nexport const xValueCandidateVotes = d => d['candidate_total_votes'];\r\nexport const yValue = d => d['constituency'];\r\nexport const getConsNumber = d => d['constituency_number'];\r\nconst getDistrict = d => d['district'];\r\nconst getDistrictNumber = d => d['district_number'];\r\nexport const selectColor = d => d['party'];\r\nexport const getPolledVotesColor = d => 'total_polled_votes';\r\nexport const candidate = d => d['candidate']\r\nexport const party = d => d['party']\r\nexport const candidateVotes = d => d['candidate_vote_%']\r\n\r\nexport const getUniqueData = (data) => [...new Map(data.map(rowData =>\r\n    [rowData['constituency_number'], rowData])).values()];\r\n\r\n// filters all the rows belongs to the given constituency\r\nconst getConsInfoByConsName = (data, consName) => (\r\n    data.filter(d => (yValue(d) === consName))\r\n);\r\n\r\nexport const getConsInfoByConsNum = (data, consNumber) => (\r\n    data.filter(d => (getConsNumber(d) === consNumber))\r\n);\r\n\r\nexport const getDataByDistrictNum = (data, dustrictNum) => (\r\n    data.filter(d => (getDistrictNumber(d) === +dustrictNum))\r\n);\r\n\r\nexport const getDataByPartyName = (data, partyName) => (\r\n    data.filter(d => (party(d) === partyName))\r\n);\r\n\r\n// get cons info in decending order\r\nexport const getDescenConsInfo = (data, consNumber) => {\r\n    return sortDescenting(getConsInfoByConsNum(data, consNumber), 'candidate_total_votes');\r\n};\r\n\r\nconst getDescenConsInfoThroughConsNum = (data, consNumber) => {\r\n    return sortDescenting(getConsInfoByConsNum(data, consNumber), 'candidate_total_votes');\r\n};\r\n\r\n// sorting functions (input is dataset and the column header)\r\nexport const sortDescenting = (data, key) => (\r\n    data.slice().sort((a, b) => d3.descending(a[key], b[key]))\r\n);\r\n\r\nconst sortAscending = (data, key) => (\r\n    data.slice().sort((a, b) => d3.ascending(a[key], b[key]))\r\n);\r\n\r\nexport const getConsNumbers = (data) => [...new Map(data.map(rowData =>\r\n    [rowData['constituency_number'], 0])).keys()];\r\n\r\nconst getUniqueDataByKey = (data, key) => [...new Map(data.map(rowData =>\r\n    [rowData[key], rowData])).values()];\r\n    \r\nexport const getUniqueSetbyColumnKey = (data, key) => [...new Set(data.map(rowData => rowData[key]))]\r\n\r\nexport const makeDistrictsDropdownData = (data) => {\r\n    const uniqueData = getUniqueDataByKey(data, 'district_number');\r\n    const sortUniqueData = sortAscending(uniqueData, 'district');\r\n    const dropdownData = [...sortUniqueData.map(d => ({value: getDistrictNumber(d), label: getDistrict(d)}))]\r\n    dropdownData.unshift({value:'ALL DISTRICTS', label: 'ALL DISTRICTS'});\r\n    return dropdownData;\r\n}\r\n\r\nexport const makeWinPartiesDropdownData = (data) => {\r\n    const uniqueData = getUniqueDataByKey(data, 'party');\r\n    const sortUniqueData = sortAscending(uniqueData, 'party');\r\n    const dropdownData = [...sortUniqueData.map(d => ({value: party(d), label: party(d)}))]\r\n    dropdownData.unshift({value:'All Winning Parties', label: 'All Winning Parties'});\r\n    return dropdownData;\r\n}\r\n\r\nexport const makePartiesDropdownData = (data) => {\r\n    const filterData = data.filter(rowData => candidateVotes(rowData) >= 1.0)\r\n    const partiesAbove = [...new Set(filterData.map(rowData => party(rowData)))];\r\n    const partiesAboveSort = partiesAbove.slice().sort((a, b) => d3.ascending(a, b));\r\n    const dropdownData = [...partiesAboveSort.map(d => ({value: d, label: d}))]\r\n    return dropdownData;\r\n}\r\n\r\nexport const getElectionSummary = (data, winnersData) => {\r\n    const electionSummary = [];\r\n    let totalParties = 0;\r\n    let maleVotes = 0;\r\n    let femaleVotes = 0;\r\n    let otherVotes = 0;\r\n    let totalVotes = 0;\r\n    let totalPolledVotes = 0;\r\n    let districts = 0;\r\n\r\n    totalParties = getUniqueSetbyColumnKey(data, 'party');\r\n    districts = getUniqueSetbyColumnKey(winnersData, 'district_number');\r\n    for(let rowData of winnersData) {\r\n        maleVotes += rowData['male_votes'];\r\n        femaleVotes += rowData['female_votes'];\r\n        otherVotes += rowData['thirunangai_votes'];\r\n        totalVotes += rowData['total_votes'];\r\n        totalPolledVotes += rowData['total_polled_votes'];        \r\n    }\r\n    \r\n    electionSummary.push(\r\n        {key: 'Total districts', value: df(districts.length)},\r\n        {key: 'Total constituency', value: df(winnersData.length)},\r\n        {key: 'Total candidates', value: df(data.length)},\r\n        {key: 'Total parties', value: df(totalParties.length)},\r\n        {key: 'Total male votes', value: df(maleVotes)},\r\n        {key: 'Total female votes', value: df(femaleVotes)},\r\n        {key: 'Total third gender votes', value: df(otherVotes)},\r\n        {key: 'Total votes', value: df(totalVotes)},\r\n        {key: 'Total polled votes', value: df(totalPolledVotes)}\r\n    );\r\n\r\n    return electionSummary;\r\n}\r\n\r\nexport const getWinnersSummary = (data) => {\r\n    const uniqueData = getUniqueDataByKey(data, 'party');\r\n    const sortUniqueData = sortAscending(uniqueData, 'party');\r\n    const winnersSummary = [...sortUniqueData.map(d => ({party: party(d), seats: getDataByPartyName(data, party(d)).length}))]\r\n    return winnersSummary;\r\n}\r\n\r\nexport const getWinnersData = (data) => {\r\n    const consNumbers = getConsNumbers(data);\r\n    const winnwersData = consNumbers.map((consNumber, index) => {\r\n        const consData = getDescenConsInfo(data, consNumber);\r\n        consData[0]['candidates'] = consData.length;\r\n        consData[0]['winning_margin'] = xValueCandidateVotes(consData[0]) - xValueCandidateVotes(consData[1]);\r\n        consData[0]['winning_margin_percentage'] = candidateVotes(consData[0]) - candidateVotes(consData[1]);\r\n        return (\r\n            // sort the cons data and get the first row\r\n            consData[0]\r\n        )\r\n    });\r\n    return winnwersData;\r\n};\r\n\r\nexport const getConsDataForIndeCandidates = (data, winnersData) => {\r\n    const allConsTopIndeDatas = []\r\n    const consIndeData = winnersData.map((winnerData, index) => {        \r\n        const consIndeDatas = data.filter(d => (getConsNumber(d) === getConsNumber(winnerData)) && (party(d) === 'Independent'));\r\n        const sortConsIndeDatas = sortDescenting(consIndeDatas, 'candidate_total_votes');\r\n        if(sortConsIndeDatas.length > 0) {\r\n            allConsTopIndeDatas.push(sortConsIndeDatas[0]);\r\n        }\r\n        return true;\r\n    });\r\n    return allConsTopIndeDatas;\r\n}\r\n\r\nexport const getFilterdDataByConsNum = (data, consNumbers) => \r\n    [...consNumbers.map((consNumber, index) => getConsInfoByConsNum(data, consNumber))].flat()\r\n\r\n\r\nexport const allColors = {\r\n    'All India Anna Dravida Munnetra Kazhagam':'#006400', // darkgreen\r\n    'Amma Makkal Munnettra Kazagam' : '#b0c4de', // lightsteelblue\r\n    'Bharatiya Janata Party': '#ff8c00', // darkorange\r\n    'Communist Party of India' : '#ff0000', // red\r\n    'Communist Party of India  (Marxist)' : '#ff0000', // red\r\n    'Desiya Murpokku Dravida Kazhagam' : '#cd853f', // peru\r\n    'Dravida Munnetra Kazhagam' : '#800000', // maroon\r\n    'Independent' : '#9400d3', // darkviolet\r\n    'Indian National Congress' : '#228b22', // forestgreen\r\n    'Indian Union Muslim League' : '#9acd32', // yellowgreen\r\n    'Makkal Needhi Maiam' : '#ff69b4', // hotpink\r\n    'Naam Tamilar Katchi' : '#00ff00', // lime\r\n    'None of the Above' : '#000000', // black\r\n    'Pattali Makkal Katchi': '#ffff00', // yellow\r\n    'Viduthalai Chiruthaigal Katchi': '#1e90ff', // dodgerblue   \r\n    'total_polled_votes' : '#808080', // gray\r\n    'total_votes' : '#E5E2E0',     \r\n    'bar_color' : '#E5E2E0',     \r\n    'votes_map_color' : '#4b0082', // \r\n    // 'votes_map_color' : '#1f77b4',\r\n    // 'votes_map_color' : '#000000' // gray\r\n    'others' : '#9400d3', // darkviolet\r\n};\r\n\r\nexport const allColors_test = [\r\n    {party: 'Makkal Needhi Maiam', start_color: '#fff0ff', stop_color: '#ff00ff'}\r\n]\r\n\r\nexport const barChartOptions = [\r\n    {value: 'default', label: 'Default'},\r\n    {value: 'poll_percentage', label: 'Poll percentage'},\r\n    {value: 'total_votes', label: 'Total votes'}\r\n];\r\n\r\nexport const voteOptions = [\r\n    {value: 'candidates', label: 'Candidates'},    \r\n    {value: 'total_polled_votes', label: 'Polled votes'},\r\n    {value: 'total_votes', label: 'Total votes'},\r\n    {value: 'winning_margin', label: 'Winning Margin'}\r\n];","import React, { useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nimport AxisBottom from './AxisBottom';\r\nimport AxisLeft from './AxisLeft';\r\nimport MarksBar from './MarksBar';\r\nimport MarksCircle from './MarksCircle';\r\nimport BarTooltip from './BarTooltip';\r\nimport BarLegend from './BarLegend';\r\n\r\nimport { \r\n    xValueVotes,\r\n    xValuePolledVotes,\r\n    xValueCandidateVotes,\r\n    yValue,\r\n    getConsNumber,\r\n    party,\r\n    candidateVotes,\r\n    selectColor,\r\n    getPolledVotesColor,\r\n    candidate,\r\n    getConsNumbers,\r\n    getDataByDistrictNum,\r\n    getDataByPartyName,\r\n    getFilterdDataByConsNum,\r\n    getDescenConsInfo,\r\n    sortDescenting,\r\n    allColors\r\n} from '../DataProcess/RearrangeData';\r\n\r\n\r\nconst width = 1080;\r\nconst margin = {top: 30, right: 20, bottom: 65, left: 20};\r\nconst innerWidth = width - margin.left - margin.right;\r\n\r\n    \r\nconst BarChart = ({\r\n    data,\r\n    winnersData,\r\n    district,\r\n    chartOrder,\r\n    partyName\r\n}) => {\r\n    const [consData, setconsData] = useState(undefined);\r\n    const {\r\n        xScale, \r\n        yScale,\r\n        rScale,\r\n        innerHeight,\r\n        height,\r\n        uniqueAcData,\r\n        allDataSort\r\n    } = React.useMemo(() => {\r\n        if (!data) return {}\r\n        console.log('re-ran-L45');\r\n        let uniqueData = {};\r\n        let uniqueAcData = {};\r\n        let allDataSort = {};\r\n\r\n        uniqueData = winnersData;\r\n        uniqueAcData = uniqueData;\r\n        allDataSort = data;\r\n\r\n        if(district !== 'ALL DISTRICTS') {\r\n            uniqueData = getDataByDistrictNum(winnersData, district);\r\n            uniqueAcData = uniqueData;\r\n            allDataSort = getDataByDistrictNum(data, district);\r\n        }\r\n\r\n        if(partyName !== 'All Winning Parties') {\r\n            uniqueData = getDataByPartyName(winnersData, partyName);\r\n            uniqueAcData = uniqueData;\r\n            const consNumbers = getConsNumbers(uniqueData);\r\n            allDataSort = getFilterdDataByConsNum(data, consNumbers);\r\n        }\r\n        \r\n        allDataSort.map(d => d['poll_percentage'] = xValuePolledVotes(d)/xValueVotes(d));\r\n\r\n        \r\n        // svg height based on data length\r\n        const height = 30 * uniqueData.length + margin.top + margin.bottom;\r\n        const innerHeight = height - margin.top - margin.bottom;\r\n\r\n        //  sorting the data based on the select chart sorting order\r\n        if(chartOrder !== 'default'){       \r\n            const uniqueDataSort = sortDescenting(uniqueData, chartOrder);\r\n            uniqueAcData = uniqueDataSort;\r\n        }\r\n\r\n        const xScale = d3.scaleLinear()\r\n            .domain([0, d3.max(winnersData.map(xValueVotes))])\r\n            .range([innerWidth / 5, innerWidth]);\r\n        \r\n        const yScale = d3.scaleBand()\r\n            .domain(uniqueAcData.map(yValue))\r\n            .range([0, innerHeight])\r\n            .padding(0.10);\r\n        \r\n        const rScale = d3.scaleLinear()\r\n            .range([0, yScale.bandwidth()]);\r\n        \r\n        return {\r\n            xScale, \r\n            yScale,\r\n            rScale,\r\n            innerHeight,\r\n            height,\r\n            uniqueAcData,\r\n            allDataSort\r\n        }\r\n    },[data, winnersData, district, chartOrder, partyName]);\r\n\r\n    // resets (close) the bar tooltip\r\n    useEffect(() => {\r\n        setconsData(undefined);\r\n    }, [district, chartOrder, partyName]);\r\n\r\n    if(!data) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n    \r\n    return (\r\n        <div id='wrapper' className='wrapper'>\r\n            <svg width={width} height={height}>\r\n                <g transform={`translate(${0},${margin.top})`}>\r\n                    <BarLegend\r\n                        className='total-votes'\r\n                        x={50}\r\n                        y={-25}\r\n                    ></BarLegend>\r\n\r\n                    <g>\r\n                    <AxisBottom \r\n                        xScale={xScale} \r\n                        innerHeight={innerHeight}\r\n                        tickFormat={d3.format(\",d\")}\r\n                    />\r\n                    </g>\r\n\r\n                    <g>\r\n                        <AxisLeft yScale={yScale} innerWidth={innerWidth}/>\r\n                    </g>\r\n                    \r\n                    <MarksBar\r\n                        cName='total-votes'\r\n                        xScale={xScale} \r\n                        yScale={yScale} \r\n                        innerWidth={innerWidth}\r\n                        xValue={xValueVotes}\r\n                        yValue={yValue}\r\n                        getConsNumber={getConsNumber}\r\n                        data={uniqueAcData}\r\n                        onMarksBarClick={consNumber => \r\n                            setconsData(getDescenConsInfo(allDataSort, consNumber))\r\n                        }\r\n                    />\r\n\r\n                    {/* for total polled votes */}\r\n                    <g>\r\n                        <MarksCircle \r\n                            xScale={xScale}\r\n                            yScale={yScale} \r\n                            rScale={rScale}\r\n                            rDomain={xValuePolledVotes}\r\n                            xValue={xValuePolledVotes}\r\n                            yValue={yValue}\r\n                            selectColor={getPolledVotesColor}\r\n                            allColors={allColors}\r\n                            opacity={0.1}\r\n                            data={uniqueAcData}\r\n                        />\r\n                    </g>\r\n\r\n                    {/* for party votes */}\r\n                    <g>\r\n                        <MarksCircle \r\n                            xScale={xScale}\r\n                            yScale={yScale} \r\n                            rScale={rScale}\r\n                            rDomain={xValuePolledVotes}\r\n                            xValue={xValueCandidateVotes}\r\n                            yValue={yValue}\r\n                            selectColor={selectColor}\r\n                            allColors={allColors}\r\n                            opacity={0.9}\r\n                            data={allDataSort}\r\n                        />\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n            <BarTooltip\r\n                margin={margin}\r\n                xScale={xScale}\r\n                yScale={yScale}\r\n                xValueVotes={xValueVotes}\r\n                xValuePolledVotes={xValuePolledVotes}\r\n                yValue={yValue}\r\n                party={party}\r\n                xValueCandidateVotes={xValueCandidateVotes}\r\n                candidateVotes={candidateVotes}\r\n                selectColor={selectColor}\r\n                allColors={allColors}\r\n                candidate={candidate}\r\n                consData={consData}\r\n                dataFormat={d3.format(\",d\")}\r\n                onCloseBtnClick={setconsData}\r\n            /> \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BarChart","import { useEffect, useState } from \"react\";\r\nimport * as d3 from 'd3';\r\nimport * as topojson from \"topojson-client\";\r\n\r\nexport const GetGeoJsonData = (jsonUrl, mapType) => {\r\n    const [data, setData] = useState(null);\r\n    // console.log('GetGeoJsonData');\r\n    // Hooks useEffect will be at each render process\r\n    // with '[]' dependencies it will be called only once\r\n    useEffect(() => {\r\n        d3.json(jsonUrl).then(topojsonData => {\r\n            switch(mapType) {\r\n               case 'hex-map':\r\n                    const {tn_ac_2021_hex_map} = topojsonData.objects\r\n                    setData({\r\n                        tn_ac: topojson.feature(topojsonData, tn_ac_2021_hex_map),\r\n                        interiors: topojson.mesh(topojsonData, tn_ac_2021_hex_map, (a,b) => a !== b)\r\n                    });\r\n                   break;\r\n                case 'std-map':\r\n                    const {tn_ac_2021} = topojsonData.objects\r\n                    setData({\r\n                        tn_ac: topojson.feature(topojsonData, tn_ac_2021),\r\n                        interiors: topojson.mesh(topojsonData, tn_ac_2021, (a,b) => a !== b)\r\n                    });\r\n                    break;\r\n                default:\r\n                    setData(null);\r\n            }\r\n        });\r\n    }, []);\r\n    return data;\r\n};\r\n\r\n","import React from 'react'\r\n\r\nconst MarkMap = React.forwardRef(({\r\n    className,\r\n    mapData: {tn_ac, interiors},\r\n    winnersData,\r\n    path,\r\n    fillColor\r\n}, ref) => {\r\n    // console.log('MarkMap');\r\n    return (\r\n        <g ref={ref} className={className}>\r\n            {tn_ac.features.map((feature, index) => {\r\n                const acNumber = feature['properties']['AC_NO'];\r\n                const distNumber = feature['properties']['DT_CODE'];\r\n                return (\r\n                    <>\r\n                    <path\r\n                        key={index}\r\n                        className={'land'} \r\n                        district={distNumber}\r\n                        constituency={acNumber}\r\n                        d={path(feature)}\r\n                        fill={fillColor(winnersData, acNumber)}\r\n                    >\r\n                        <title className='geo-tooltip'>\r\n                        </title>\r\n                    </path>\r\n                    </>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n});\r\n\r\n\r\nfunction areEqual (prevProps, nextProps) {\r\n    return prevProps.mapData === nextProps.mapData;\r\n}\r\n\r\nexport default React.memo(MarkMap, areEqual);\r\n// export default MarkMap;","import React, { useEffect, useRef } from 'react'\r\nimport * as d3 from 'd3';\r\n\r\nimport MarkMap from './MarkMap';\r\nimport { \r\n    yValue,\r\n    party,\r\n    getDataByPartyName,\r\n    getConsInfoByConsNum\r\n } from '../DataProcess/RearrangeData';\r\n\r\nconst GeoMapWinner = ({\r\n    district,\r\n    partyName,\r\n    mapData,\r\n    winnersData,\r\n    path,\r\n    fillColor\r\n}) => {\r\n    // console.log('GeoMap - Winners');\r\n\r\n    const refG = useRef([]);\r\n    // get only the a party from winners data\r\n    const partyWinnersData = getDataByPartyName(winnersData, partyName);\r\n\r\n    useEffect(() => {\r\n        const selectMapG = d3.select(refG.current);\r\n        const mapPaths = selectMapG.selectAll('path')\r\n\r\n        mapPaths.each(function() {\r\n            const el = d3.select(this);            \r\n            const winnersRowData = getConsInfoByConsNum(winnersData, Number(el.attr('constituency')));\r\n            el.select('title')\r\n                .text(`${yValue(winnersRowData[0])} ${'\\n'} ${party(winnersRowData[0])}`)\r\n        });\r\n        \r\n        if((district === 'ALL DISTRICTS') && (partyName === 'All Winning Parties')) {\r\n            mapPaths.style('opacity', 1.0);\r\n        } else if((district !== 'ALL DISTRICTS') || (partyName !== 'All Winning Parties')) {\r\n            mapPaths.each(function() {\r\n                const el = d3.select(this);                \r\n                const rowData = getConsInfoByConsNum(partyWinnersData, Number(el.attr('constituency')));\r\n                if((el.attr('district') === district) || (rowData.length > 0)) {\r\n                    el.style('opacity', 1.0);\r\n                } else {\r\n                    el.style('opacity', 0.4);\r\n                }\r\n            });\r\n        }\r\n\r\n    },[district, partyName, mapData])\r\n\r\n    return (\r\n        <MarkMap \r\n            ref={refG}\r\n            className='winners-map'\r\n            mapData={mapData}\r\n            winnersData={winnersData}\r\n            path={path}\r\n            fillColor={fillColor}\r\n        ></MarkMap>\r\n    );\r\n}\r\n\r\nexport default GeoMapWinner;\r\n\r\n","import React from \"react\";\r\n\r\nimport { allColors } from \"../DataProcess/RearrangeData\";\r\n\r\nconst GeoMapWinnerLegend = ({\r\n    resultSummary\r\n}) => {\r\n    let posX = 20;\r\n    let posY = 0;\r\n    const r = 10;\r\n    return (\r\n        <g>\r\n            {resultSummary.map((d, index) => {\r\n                posY = posY + 25;\r\n                return(\r\n                    <>\r\n                    <circle\r\n                        key={d['party']}\r\n                        cx={posX}\r\n                        cy={posY}\r\n                        r={r}\r\n                        fill={allColors[d['party']]}\r\n                    ></circle>\r\n                    <text\r\n                        key={index}\r\n                        x={posX + r + 5}\r\n                        y={posY + r/2}\r\n                    >{d['party']}\r\n                    </text>\r\n                    </>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n};\r\n\r\nexport default GeoMapWinnerLegend;","import React from \"react\";\r\n\r\nconst GeoMapLegend = React.forwardRef(({\r\n    steps,\r\n    additionalSteps,\r\n    fillColor\r\n}, ref) => {\r\n    let posX = 20;\r\n    let posY = 0;\r\n    const r = 10;\r\n    const items = [];\r\n    for(let i=0; i<=(steps + additionalSteps); i++) {\r\n        items.push(i);\r\n    }\r\n    return(\r\n        <g ref={ref}>\r\n            {items.map((d, index) => {\r\n                posY = posY + 25;\r\n                return(\r\n                    <>\r\n                    <circle\r\n                        cx={posX}\r\n                        cy={posY}\r\n                        r={r}\r\n                        fill={fillColor()}\r\n                    ></circle>\r\n                    <text\r\n                        x={posX + r + 5}\r\n                        y={posY + r/2}\r\n                    ></text>\r\n                    </>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n});\r\n\r\nexport default GeoMapLegend;","import React, { useEffect, useRef } from 'react'\r\nimport * as d3 from 'd3'\r\n\r\nimport GeoMapLegend from './GeoMapLegend';\r\nimport MarkMap from './MarkMap';\r\nimport { \r\n    yValue,\r\n    xValueVotes,\r\n    xValuePolledVotes,\r\n    getPollPercentage,\r\n    getConsInfoByConsNum\r\n} from '../DataProcess/RearrangeData';\r\n\r\nconst GeoMapVotes = ({\r\n    voteMap,\r\n    mapData,\r\n    winnersData,\r\n    path,\r\n    fillColor,\r\n}) => {\r\n    // console.log('GeoMap - Votes');\r\n\r\n    const refG = useRef([]);\r\n    const refGeoMapLegengG = useRef();\r\n\r\n    const steps = 5;\r\n    const dataFormat = d3.format(\",d\");\r\n\r\n    const df = d3.format(\".2%\")\r\n    const df2 = d3.format(\".2f\")\r\n\r\n    useEffect(() => {\r\n        let maxVotes = 1.0;\r\n        let opacity = 1.0;\r\n        let mapLegendText = 0;\r\n        let mapLegendOpacity = 0;\r\n\r\n        const selectMapG = d3.select(refG.current);\r\n        const mapPaths = selectMapG.selectAll('path')\r\n\r\n        const selectlegengG = d3.select(refGeoMapLegengG.current);\r\n        const mapLegendsText = selectlegengG.selectAll('text');\r\n        const mapLegendsCircle = selectlegengG.selectAll('circle');\r\n\r\n        mapPaths.each(function() {\r\n            const el = d3.select(this)\r\n            const rowData = getConsInfoByConsNum(winnersData, Number(el.attr('constituency')))\r\n            switch (voteMap) {\r\n                case 'candidates':\r\n                    const candidates = rowData[0]['candidates'];\r\n                    opacity = candidates / 100;\r\n                    el.select('title')\r\n                        .text(`${yValue(rowData[0])} ${'\\n'} ${candidates}`);\r\n                    break;\r\n                case 'total_votes':\r\n                    maxVotes = d3.max(winnersData.map(xValueVotes));\r\n                    opacity = rowData[0][voteMap] / maxVotes;\r\n                    el.select('title')\r\n                        .text(`${yValue(rowData[0])} ${'\\n'} ${dataFormat(xValueVotes(rowData[0]))}`);\r\n                    break;\r\n                case 'total_polled_votes':\r\n                    maxVotes = rowData[0]['total_votes'];\r\n                    opacity = rowData[0][voteMap] / maxVotes;\r\n                    el.select('title')\r\n                        .text(`${yValue(rowData[0])} ${'\\n'} ${dataFormat(xValuePolledVotes(rowData[0]))} (${df(getPollPercentage(rowData[0]))})`);\r\n                    break;\r\n                case 'winning_margin':\r\n                    maxVotes = xValuePolledVotes(rowData[0]);\r\n                    const winningMargin = rowData[0]['winning_margin'];\r\n                    opacity = winningMargin / maxVotes;\r\n                    el.select('title')\r\n                        .text(`${yValue(rowData[0])} ${'\\n'} ${dataFormat(winningMargin)} (${df2(rowData[0]['winning_margin_percentage'])}%)`);\r\n                    break;\r\n                default:\r\n                    opacity = 1.0;\r\n            }\r\n            el.style('fill', d3.interpolateGnBu(opacity));\r\n        });\r\n\r\n        mapLegendsText.each(function() {\r\n            const lgel = d3.select(this);\r\n            if(voteMap === 'candidates') {\r\n                lgel.text(mapLegendText);\r\n                mapLegendText = mapLegendText + 20;\r\n            }else {\r\n                lgel.text(`${mapLegendText}%`);\r\n                    mapLegendText = mapLegendText + 20;\r\n            }\r\n        });\r\n\r\n        mapLegendsCircle.each(function() {\r\n            const lgel = d3.select(this);\r\n            lgel.attr('fill', d3.interpolateGnBu(mapLegendOpacity));\r\n            mapLegendOpacity = mapLegendOpacity + 0.2;\r\n        });\r\n    },[voteMap, mapData])\r\n    return (\r\n        <>\r\n        <GeoMapLegend\r\n            ref={refGeoMapLegengG}\r\n            steps={steps}\r\n            additionalSteps={0}\r\n            fillColor={fillColor}\r\n        ></GeoMapLegend>\r\n        <MarkMap \r\n            ref={refG}\r\n            className='votes-map'\r\n            mapData={mapData}\r\n            winnersData={winnersData}\r\n            path={path}\r\n            fillColor={fillColor}\r\n        ></MarkMap>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GeoMapVotes;","import { useEffect, useRef } from \"react\";\r\nimport * as d3 from 'd3';\r\n\r\nimport GeoMapLegend from './GeoMapLegend';\r\nimport MarkMap from \"./MarkMap\";\r\n\r\nimport { \r\n    yValue,\r\n    getDataByPartyName,\r\n    getConsInfoByConsNum,\r\n    candidateVotes,\r\n    getConsDataForIndeCandidates\r\n } from \"../DataProcess/RearrangeData\";\r\n\r\nconst GeoMapParties = ({\r\n    selectParty,\r\n    mapData,\r\n    winnersData,\r\n    consData,\r\n    path,\r\n    fillColor\r\n}) => {\r\n    // console.log('GeoMap - Parties');\r\n\r\n    const refG = useRef([]);\r\n    const refGeoMapLegengG = useRef();\r\n\r\n    const steps = 5;\r\n\r\n    useEffect(() => {\r\n        let partyData = 0;\r\n        let mapLegendText = 0;\r\n        let mapLegendOpacity = 0;\r\n\r\n        if(selectParty === 'Independent') {\r\n            partyData = getConsDataForIndeCandidates(consData, winnersData)\r\n        } else {\r\n            partyData = getDataByPartyName(consData, selectParty);\r\n        }\r\n        const selectMapG = d3.select(refG.current);\r\n        const mapPaths = selectMapG.selectAll('path')\r\n\r\n        const selectlegengG = d3.select(refGeoMapLegengG.current);\r\n        const mapLegendsText = selectlegengG.selectAll('text');\r\n        const mapLegendsCircle = selectlegengG.selectAll('circle');\r\n\r\n        mapPaths.each(function() {\r\n            const el = d3.select(this)\r\n            const rowData = getConsInfoByConsNum(partyData, Number(el.attr('constituency')))\r\n            if(rowData.length > 0) {\r\n                const color = fillColor(selectParty);\r\n                el.attr('fill', color);\r\n                el.style('fill-opacity', candidateVotes(rowData[0]) / 100);\r\n                el.attr('stroke', fillColor(selectParty));\r\n                el.select('title')\r\n                    .text(`${yValue(rowData[0])} ${'\\n'} ${candidateVotes(rowData[0])}%`)\r\n            } else {\r\n                const rowData = getConsInfoByConsNum(winnersData, Number(el.attr('constituency')))\r\n                el.attr('fill', '#000000');\r\n                el.attr('stroke', fillColor(selectParty));\r\n                el.style('fill-opacity', 0.1)\r\n                el.select('title')\r\n                    .text(`${yValue(rowData[0])}`)\r\n            }\r\n        });\r\n\r\n        mapLegendsText.each(function() {\r\n            const lgel = d3.select(this);\r\n            if(mapLegendText <= 100) {\r\n                lgel.text(`${mapLegendText}%`);\r\n                mapLegendText = mapLegendText + 20;\r\n            }else {\r\n                lgel.text('Not contested');\r\n            }\r\n\r\n            \r\n        });\r\n\r\n        mapLegendsCircle.each(function() {\r\n            const lgel = d3.select(this);\r\n            if(mapLegendOpacity <= 1.0) {\r\n                lgel.attr('fill', fillColor(selectParty));\r\n                lgel.style('fill-opacity', mapLegendOpacity);\r\n                mapLegendOpacity = mapLegendOpacity + 0.2;\r\n            }else {\r\n                lgel.attr('fill', '#000000');\r\n                lgel.style('fill-opacity', 0.1);\r\n            }\r\n        });\r\n    },[selectParty, mapData, consData, winnersData, fillColor])\r\n\r\n    return (\r\n        <>\r\n        <GeoMapLegend\r\n            ref={refGeoMapLegengG}\r\n            steps={steps}\r\n            additionalSteps={1}\r\n            fillColor={fillColor}\r\n        ></GeoMapLegend>\r\n        <MarkMap \r\n            ref={refG}\r\n            className='parties-map'\r\n            mapData={mapData}\r\n            winnersData={winnersData}\r\n            path={path}\r\n            fillColor={fillColor}\r\n        ></MarkMap>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GeoMapParties;\r\n\r\n","import React from \"react\"\r\n\r\nconst RadioButtonGroup = ({\r\n    className,\r\n    onChangeValue\r\n}) => {\r\n    return(\r\n        <div className={className} onChange={(event)=>onChangeValue(event.target.value)}>\r\n            <RadioButton\r\n                id={'hextile-map'}\r\n                name={'map-type'}\r\n                checked={true}\r\n                value={'hextile-map'}\r\n                text={'Hex tile map'}\r\n            ></RadioButton>\r\n            <RadioButton\r\n                id={'standard-map'}\r\n                name={'map-type'}\r\n                checked={false}\r\n                value={'standard-map'}\r\n                text={'Standard map'}\r\n            ></RadioButton>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst RadioButton = ({\r\n    id,\r\n    name,\r\n    checked,\r\n    value,\r\n    text\r\n}) => {\r\n    return(\r\n        <>\r\n        <input \r\n            type='radio' \r\n            id={id} \r\n            name={name} \r\n            defaultChecked={checked} \r\n            value={value}\r\n        ></input>\r\n        <label htmlFor={id}>{text}</label>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RadioButtonGroup;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nimport GeoMapWinner from './GeoMapWinner';\r\nimport GeoMapWinnerLegend from './GeoMapWinnerLegend';\r\nimport GeoMapVotes from './GeoMapVotes';\r\nimport GeoMapParties from './GeoMapParties';\r\nimport Dropdown from '../components/Dropdown';\r\nimport SubtitleH3 from '../components/SubtitleH3';\r\nimport TextContent from '../components/TextContent';\r\nimport RadioButtonGroup from '../components/RadioButtonGroup';\r\n\r\nimport {\r\n    getConsNumber,\r\n    makePartiesDropdownData,\r\n    getWinnersSummary,\r\n    allColors,\r\n    party,\r\n    voteOptions\r\n} from '../DataProcess/RearrangeData';\r\n\r\nconst width = 900;\r\nconst height = 900;\r\nconst mapScale = 8000;\r\nconst TamilNadu = [78.5, 10.5];\r\n\r\nconst projection = d3.geoEquirectangular()\r\n        .center(TamilNadu)\r\n        .scale(mapScale)\r\n        .translate([width/2, height/1.8]);\r\nconst path = d3.geoPath(projection);\r\n\r\nconst GeoChart = ({\r\n    hexMapData,\r\n    stdMapData,\r\n    consData,\r\n    winnersData,\r\n    district,\r\n    partyName\r\n}) => {\r\n    // console.log('GeoChart');\r\n    const [mapType, setMapType] = useState('hextile-map');\r\n    const [voteMap, setVoteMap] = useState('candidates');\r\n    const [selectParty, setSelectParty] =useState('Dravida Munnetra Kazhagam');\r\n\r\n    let mapData = 0;\r\n    if(mapType === 'hextile-map') {\r\n        mapData = hexMapData;\r\n    } else {\r\n        mapData = stdMapData;\r\n    }\r\n    const fillColorWinners = (winnersData, acNumber) => {\r\n        const rowData = winnersData.find(d => getConsNumber(d) === acNumber)\r\n        return allColors[party(rowData)];\r\n    };\r\n\r\n    const fillColorVotes = () => {\r\n            // return allColors['total_polled_votes'];\r\n            return allColors['votes_map_color'];\r\n    };\r\n\r\n    const fillColorParties = (selectParty) => {\r\n        if(allColors[selectParty]) {\r\n            return allColors[selectParty];\r\n        }\r\n        return allColors['others'];\r\n    };\r\n\r\n    const resultSummary = getWinnersSummary(winnersData);\r\n    const allParties = makePartiesDropdownData(consData, 'party');\r\n\r\n    return (\r\n        <>\r\n        <SubtitleH3\r\n            className='subtitle'\r\n            text={'Winners Map'}\r\n        ></SubtitleH3>\r\n        <TextContent\r\n            className='text-content'\r\n            textContent={\r\n                `Winning parties overview. The hex tile map better represents the data set.`\r\n            }\r\n        ></TextContent>\r\n        <RadioButtonGroup\r\n            className={'margin-tb'}\r\n            onChangeValue={setMapType}\r\n        ></RadioButtonGroup>\r\n\r\n        <div>\r\n            <svg width={width} height={height}>\r\n                <GeoMapWinnerLegend\r\n                    resultSummary={resultSummary}\r\n                ></GeoMapWinnerLegend>\r\n                <GeoMapWinner\r\n                    district={district}\r\n                    partyName={partyName}\r\n                    mapData={mapData}\r\n                    winnersData={winnersData}\r\n                    path={path}\r\n                    fillColor={fillColorWinners}\r\n                ></GeoMapWinner>\r\n            </svg>\r\n        </div>\r\n\r\n        <SubtitleH3\r\n            className='subtitle'\r\n            text={`Constituencies Information Map`}\r\n        ></SubtitleH3>\r\n        <TextContent\r\n            className='text-content'\r\n            textContent={\r\n                `Constituency information view for total number of candidates contested, total polled votes, total votes and\r\n                winning margin.`\r\n            }\r\n        ></TextContent>\r\n        {/* <div className='geo-chart-container'> */}\r\n            <div>\r\n                <div className='select-option-container'>\r\n                    <Dropdown\r\n                        id={'select-votes'}\r\n                        className={'select-votes'}\r\n                        defaultValue={'candidates'}\r\n                        options={voteOptions}\r\n                        defaultVale={voteMap}\r\n                        disabled={false}\r\n                        onOptionChange={setVoteMap}\r\n                    ></Dropdown>\r\n                </div>\r\n                <div>\r\n                    <svg width={width} height={height}>\r\n                        <GeoMapVotes \r\n                            voteMap={voteMap}\r\n                            mapData={mapData}\r\n                            winnersData={winnersData}\r\n                            path={path}\r\n                            fillColor={fillColorVotes}\r\n                        ></GeoMapVotes>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n\r\n            <SubtitleH3\r\n                className='subtitle'\r\n                text={`Vote sharing Map`}\r\n            ></SubtitleH3>\r\n            <TextContent\r\n                className='text-content'\r\n                textContent={\r\n                    `The vote shating map only includes parties who has secured minimum one percentage of votes atleast in one constituency.`\r\n                }\r\n            ></TextContent>\r\n            <div>\r\n                <div className='select-option-container'>\r\n                    <Dropdown\r\n                        id={'select-parties'}\r\n                        className={'select-parties'}\r\n                        defaultValue={'Dravida Munnetra Kazhagam'}\r\n                        options={allParties}\r\n                        defaultVale={selectParty}\r\n                        disabled={false}\r\n                        onOptionChange={setSelectParty}\r\n                    ></Dropdown>\r\n                </div>\r\n                <div>\r\n                    <svg width={width} height={height}>\r\n                        <GeoMapParties \r\n                            selectParty={selectParty}\r\n                            mapData={mapData}\r\n                            winnersData={winnersData}\r\n                            consData={consData}\r\n                            path={path}\r\n                            fillColor={fillColorParties}\r\n                        ></GeoMapParties>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        {/* </div> */}\r\n        </>\r\n    );  \r\n}\r\n\r\nexport default GeoChart;","import React from 'react';\r\n\r\nimport { GetGeoJsonData } from '../DataProcess/GetGeoJsonData';\r\nimport GeoChart from './GeoChart';\r\n\r\nconst stdMapTopoUrl= 'topo_tn_ac_2021.json';\r\nconst hexMapTopoUrl= 'topo_tn_ac_2021_hex_map.json';\r\n\r\nconst GeoChartWrapper = ({\r\n    consData,\r\n    winnersData, \r\n    district, \r\n    partyName\r\n}) => {   \r\n    // console.log('GeoChartWrapper');\r\n    const hexMapData = GetGeoJsonData(hexMapTopoUrl, 'hex-map');\r\n    const stdMapData = GetGeoJsonData(stdMapTopoUrl, 'std-map');\r\n    if(!hexMapData && !stdMapData) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n    return (\r\n        <GeoChart\r\n            hexMapData={hexMapData}\r\n            stdMapData={stdMapData}\r\n            consData={consData}\r\n            winnersData={winnersData}\r\n            district={district}\r\n            partyName={partyName}\r\n        ></GeoChart>\r\n    );\r\n};\r\n\r\nexport default GeoChartWrapper;","import React from \"react\";\r\n\r\nconst DisclaimerSection = ({\r\n    className\r\n}) => {\r\n    return(\r\n        <>\r\n        <hr></hr>\r\n        <div className={className}>\r\n            <p>\r\n                The election data sets are collected from election commission websites on 03/07/2021\r\n            </p>\r\n            <ol>\r\n                <li>\r\n                    <a href='https://results.eci.gov.in/Result2021/partywiseresult-S22.htm?st=S22' target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        Tamil Nadu General Assembly Elections MAY-2021\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                     <a href='https://www.elections.tn.gov.in/acwithcandidate/' target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        District wise assembly consituency electroate and candidates details.\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                     <a href='https://eci.gov.in/files/file/13680-tamil-nadu-general-legislative-election-2021/' target=\"_blank\" rel=\"noopener noreferrer\">\r\n                     Tamil Nadu General Legislative Election 2021.\r\n                    </a>\r\n                </li>\r\n            </ol>\r\n            <p>\r\n                As on 09/09/2021, the election result data is not available from <a href='https://www.elections.tn.gov.in/acwithcandidate/' target=\"_blank\" rel=\"noopener noreferrer\">[ 1 ]</a>.\r\n                The updated election result data is available from <a href='https://eci.gov.in/files/file/13680-tamil-nadu-general-legislative-election-2021/' target=\"_blank\" rel=\"noopener noreferrer\">[ 3 ]</a>.\r\n                Comparing with <a href='https://www.elections.tn.gov.in/acwithcandidate/' target=\"_blank\" rel=\"noopener noreferrer\">[ 1 ]</a>\r\n                there are some minor difference in the data set which was not considered.\r\n            </p>\r\n            <p>\r\n                The asscembly constituency boundary map files are sourced from <a href='http://projects.datameet.org/maps/assembly-constituencies/#download' target=\"_blank\" rel=\"noopener noreferrer\">[ 4 ]</a>\r\n                and converted to TopoJSON using <a href='https://mapshaper.org/' target=\"_blank\" rel=\"noopener noreferrer\">[ 6 ]</a>.\r\n                Used <a href ='https://qgis.org/en/site/' target=\"_blank\" rel=\"noopener noreferrer\">QGIS</a> to create the <a href='https://github.com/BaskaranKa/tn-hex-tile-map' target=\"_blank\" rel=\"noopener noreferrer\"> hex-tile map</a> with similar attribute names as in the boundary map file.\r\n\r\n            </p>\r\n            <ol start='4'>\r\n                <li>\r\n                     <a href='http://projects.datameet.org/maps/assembly-constituencies/#download' target=\"_blank\" rel=\"noopener noreferrer\">\r\n                     India - Assembly Constituencies\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                     <a href='https://github.com/datameet/maps/tree/master/assembly-constituencies' target=\"_blank\" rel=\"noopener noreferrer\">\r\n                     GitHub repository for India - Assembly Constituencies\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                     <a href='https://mapshaper.org/' target=\"_blank\" rel=\"noopener noreferrer\">\r\n                     mapshaper for viewing and converting geospatical data\r\n                    </a>\r\n                </li>\r\n            </ol>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DisclaimerSection;","import React, { useState } from 'react';\r\n\r\nimport './index.css';\r\nimport { GetCsvData } from './DataProcess/GetCsvData';\r\nimport Dropdown from './components/Dropdown';\r\nimport SubtitleH3 from './components/SubtitleH3';\r\nimport ElectionSummary from './components/ElectionSummary';\r\nimport ResultSummary from './components/ResultSummary';\r\nimport TextContent from './components/TextContent';\r\nimport DataName from './components/DateName';\r\nimport BarChart from './BarChart/BarChart';\r\nimport GeoChartWrapper from './GeoChart/GeoChartWrapper';\r\nimport DisclaimerSection from './components/DisclaimerSection';\r\n\r\nimport {\r\n    allColors,\r\n    barChartOptions, \r\n    getWinnersData,\r\n    makeDistrictsDropdownData,\r\n    makeWinPartiesDropdownData,\r\n    getElectionSummary,\r\n    getWinnersSummary\r\n} from './DataProcess/RearrangeData';\r\n\r\n\r\nconst csvUrl= 'tn_ac_2021.csv';\r\n    \r\nconst App = () => {\r\n    const data = GetCsvData(csvUrl);\r\n\r\n    const [district, setDistrict] = useState('ALL DISTRICTS');\r\n    const [chartOrder, setChartOrder] = useState('default');\r\n    const [partyName, setPartyName] = useState('All Winning Parties');\r\n    // console.log(district);\r\n    // console.log(partyName);\r\n\r\n    if(!data) {\r\n        return <h1>Loading...</h1>\r\n    }\r\n    // \r\n    const winnersData = getWinnersData(data);\r\n    const districtsDropdownData = makeDistrictsDropdownData(winnersData);\r\n    const partiesDropdownData = makeWinPartiesDropdownData(winnersData);\r\n    const electionSummary = getElectionSummary(data, winnersData);\r\n    const resultSummary = getWinnersSummary(winnersData);\r\n\r\n    return (\r\n        <article>\r\n            <DataName\r\n                className='date-time'\r\n            ></DataName>\r\n            <header className='page-container'>\r\n                <div>\r\n                    <h1>\r\n                        Tamil Nadu General Assembly Elections MAY-2021\r\n                    </h1>\r\n                    <div className='sub-header'>\r\n                        Dravida Munnetra Kazhagam and its alliance have won the Tamil Nadu 16th legislative assembly election and\r\n                        Mr. <b>M</b>uthuvel <b>K</b>arunanidhi <b>Stalin</b> has been elected as Chief Minister of Tamil Nadu.\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        \r\n            <div className='page-container'>\r\n                <SubtitleH3\r\n                    className='subtitle'\r\n                    text={'Election Summary'}\r\n                ></SubtitleH3>\r\n                <ElectionSummary\r\n                    electionSummary={electionSummary}\r\n                ></ElectionSummary>\r\n\r\n                <SubtitleH3\r\n                    className='subtitle'\r\n                    text={'Result Summary'}\r\n                ></SubtitleH3>\r\n                <ResultSummary\r\n                    resultSummary={resultSummary}\r\n                    allColors={allColors}\r\n                    winnersData={winnersData}\r\n                ></ResultSummary>\r\n\r\n                <SubtitleH3\r\n                    className='subtitle'\r\n                    text={'Individual Constituency Details'}\r\n                ></SubtitleH3>\r\n                <main>\r\n                    <section className='bar-chart'>\r\n                        <TextContent\r\n                            className='text-content'\r\n                            textContent={\r\n                                `Each bar represents the total votes in a constituency.\r\n                                The coloured circles on the bar represents individual party votes \r\n                                and the circle radius is scaled with respect to the polled votes in that constituency.`\r\n                            }\r\n                        ></TextContent>\r\n                        <div className='bar-chart-container'>\r\n                            <Dropdown\r\n                                id={'select-district'}\r\n                                className={'select-district'}\r\n                                defaultValue={'ALL DISTRICTS'}\r\n                                options={districtsDropdownData}\r\n                                defaultVale={district}\r\n                                disabled={(partyName !== 'All Winning Parties' )}\r\n                                onOptionChange={setDistrict}\r\n                            ></Dropdown>\r\n                            <Dropdown\r\n                                id={'barchart-order'}\r\n                                className={'barchart-order'}\r\n                                defaultValue={'default'}\r\n                                options={barChartOptions}\r\n                                defaultVale={chartOrder}\r\n                                disabled={false}\r\n                                onOptionChange={setChartOrder}\r\n                            ></Dropdown>\r\n                            <Dropdown\r\n                                id={'select-winning-party'}\r\n                                className={'select-winning-party'}\r\n                                defaultValue={'All Winning Parties'}\r\n                                options={partiesDropdownData}\r\n                                defaultVale={partyName}\r\n                                disabled={(district !== 'ALL DISTRICTS')}\r\n                                onOptionChange={setPartyName}\r\n                            ></Dropdown>\r\n                        </div>\r\n                        <div id='wrapper' className='wrapper'>\r\n                            <BarChart\r\n                                data={data}\r\n                                winnersData={winnersData}\r\n                                district={district}\r\n                                chartOrder={chartOrder}\r\n                                partyName={partyName}\r\n                            ></BarChart>\r\n                        </div>\r\n                        \r\n                    </section>\r\n                    <section className='geo-winner-chart'>\r\n                        <GeoChartWrapper\r\n                            consData={data}\r\n                            winnersData={winnersData}\r\n                            district={district}\r\n                            partyName={partyName}\r\n                        ></GeoChartWrapper>\r\n                    </section>\r\n                </main>\r\n                <DisclaimerSection\r\n                    className='text-content-small'\r\n                ></DisclaimerSection>\r\n            </div>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default App;","import { useEffect, useState } from \"react\";\r\nimport * as d3 from 'd3';\r\n\r\nexport const GetCsvData = (csvUrl) => {\r\n\r\n    const [data, setData] = useState(null);\r\n\r\n    // Hooks useEffect will be at each render process\r\n    // with '[]' dependencies it will be called only once\r\n    useEffect(() => {\r\n        d3.csv(csvUrl, d3.autoType).then(data => {\r\n            setData(data);\r\n        });\r\n    }, []);\r\n    return data;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}